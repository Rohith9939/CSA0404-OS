#include <stdio.h>
#include <stdbool.h>

#define MAX_BLOCKS 20
#define MAX_MEMORY 100

int memory[MAX_MEMORY];

void init_memory() {
    for (int i = 0; i < MAX_MEMORY; i++) {
        memory[i] = 0;
    }
}

bool allocate_memory(int size) {
    int best_fit_index = -1;
    int best_fit_size = MAX_MEMORY;

    // Find the block with the best fit (smallest unused block that is large enough)
    for (int i = 0; i < MAX_MEMORY; i++) {
        if (memory[i] == 0) {
            int j = i;
            int free_size = 0;

            // Count the size of the free block
            while (memory[j] == 0 && j < MAX_MEMORY) {
                free_size++;
                j++;
            }

            // If this free block is the best fit and large enough, remember its index and size
            if (free_size >= size && free_size < best_fit_size) {
                best_fit_index = i;
                best_fit_size = free_size;
            }
        }
    }

    // If there's no block large enough to fit the size, return failure
    if (best_fit_index == -1) {
        return false;
    }

    // Allocate the memory
    for (int i = best_fit_index; i < best_fit_index + size; i++) {
        memory[i] = 1;
    }

    return true;
}

int main() {
    init_memory();

    if (allocate_memory(20)) {
        printf("Allocated 20 units of memory\n");
    } else {
        printf("Failed to allocate memory\n");
    }

    return 0;
}
